{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\001Study\\\\Year3Therm2\\\\240-311 Distributed\\\\MiniProJect\\\\FrontEnd\\\\mini-project\\\\components\\\\Autocomplete.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\n\nvar Autocomplete = function Autocomplete(props) {\n  _s();\n\n  var _useState = useState(0),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState([]),\n      filtered = _useState2[0],\n      setFiltered = _useState2[1];\n\n  var _useState3 = useState(false),\n      isShow = _useState3[0],\n      setIsShow = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      input = _useState4[0],\n      setInput = _useState4[1];\n\n  var onChange = function onChange(e) {\n    var suggestions = props.suggestions;\n    var input = e.currentTarget.value;\n    var newFilteredSuggestions = suggestions.filter(function (suggestion) {\n      return suggestion.toLowerCase().indexOf(input.toLowerCase()) > -1;\n    });\n    setActive(0);\n    setFiltered(newFilteredSuggestions);\n    setIsShow(true);\n    setInput(e.currentTarget.value);\n  };\n\n  var onClick = function onClick(e) {\n    setActive(0);\n    setFiltered([]);\n    setIsShow(false);\n    setInput(e.currentTarget.innerText);\n  };\n\n  var onKeyDown = function onKeyDown(e) {\n    if (e.keyCode === 13) {\n      // enter key\n      setActive(0);\n      setIsShow(false);\n      setInput(filtered[active]);\n    } else if (e.keyCode === 38) {\n      // up arrow\n      return active === 0 ? null : setActive(active - 1);\n    } else if (e.keyCode === 40) {\n      // down arrow\n      return active - 1 === filtered.length ? null : setActive(active + 1);\n    }\n  };\n\n  var renderAutocomplete = function renderAutocomplete() {\n    if (isShow && input) {\n      if (filtered.length) {\n        return /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"autocomplete\",\n          children: filtered.map(function (suggestion, index) {\n            var className;\n\n            if (index === active) {\n              className = \"active\";\n            }\n\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: className,\n              onClick: onClick,\n              children: suggestion\n            }, suggestion, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, _this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-autocomplete\",\n          children: /*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"Not found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, _this);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: onChange,\n      onKeyDown: onKeyDown,\n      value: input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, _this), renderAutocomplete()]\n  }, void 0, true);\n};\n\n_s(Autocomplete, \"UxPT9ArIIosGZxZ436fdqXTUqDU=\");\n\n_c = Autocomplete;\nexport default Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["D:/001Study/Year3Therm2/240-311 Distributed/MiniProJect/FrontEnd/mini-project/components/Autocomplete.js"],"names":["React","useState","Autocomplete","props","active","setActive","filtered","setFiltered","isShow","setIsShow","input","setInput","onChange","e","suggestions","currentTarget","value","newFilteredSuggestions","filter","suggestion","toLowerCase","indexOf","onClick","innerText","onKeyDown","keyCode","length","renderAutocomplete","map","index","className"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Autocomplete = (props) => {\r\n  const [active, setActive] = useState(0);\r\n  const [filtered, setFiltered] = useState([]);\r\n  const [isShow, setIsShow] = useState(false);\r\n  const [input, setInput] = useState(\"\");\r\n  \r\n  const onChange = e => {\r\n    const { suggestions } = props;\r\n    const input = e.currentTarget.value;\r\n    const newFilteredSuggestions = suggestions.filter(\r\n      suggestion =>\r\n        suggestion.toLowerCase().indexOf(input.toLowerCase()) > -1\r\n    );\r\n    setActive(0);\r\n    setFiltered(newFilteredSuggestions);\r\n    setIsShow(true);\r\n    setInput(e.currentTarget.value)\r\n  };\r\n\r\n  const onClick = e => {\r\n    setActive(0);\r\n    setFiltered([]);\r\n    setIsShow(false);\r\n    setInput(e.currentTarget.innerText)\r\n  };\r\n\r\n  const onKeyDown = e => {\r\n    if (e.keyCode === 13) { // enter key\r\n      setActive(0);\r\n      setIsShow(false);\r\n      setInput(filtered[active])\r\n    }\r\n    else if (e.keyCode === 38) { // up arrow\r\n      return (active === 0) ? null : setActive(active - 1);\r\n    }\r\n    else if (e.keyCode === 40) { // down arrow\r\n      return (active - 1 === filtered.length) ? null : setActive(active + 1);\r\n    }\r\n  };\r\n\r\n  const renderAutocomplete = () => {\r\n    if (isShow && input) {\r\n      if (filtered.length) {\r\n        return (\r\n          <ul className=\"autocomplete\">\r\n            {filtered.map((suggestion, index) => {\r\n              let className;\r\n              if (index === active) {\r\n                className = \"active\";\r\n              }\r\n              return (\r\n                <li className={className} key={suggestion} onClick={onClick}>\r\n                  {suggestion}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        );\r\n      } else {\r\n        return (\r\n          <div className=\"no-autocomplete\">\r\n            <em>Not found</em>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    return <></>;\r\n  }  \r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"text\"\r\n        onChange={onChange}\r\n        onKeyDown={onKeyDown}\r\n        value={input}\r\n      />\r\n      {renderAutocomplete()}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Autocomplete;"]},"metadata":{},"sourceType":"module"}